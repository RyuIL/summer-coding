{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","store/modules/todo.js","store/modules/index.js","store/store.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","username","_this2","this","fetch","then","res","json","user","setState","react_default","a","createElement","className","src","logo","alt","concat","Component","Boolean","window","location","hostname","match","id","createAction","value","text","initialState","Map","input","todos","List","handleActions","_handleActions","Object","defineProperty","action","set","payload","_ref","item","checked","update","push","_ref2","index","get","findIndex","updateIn","_ref3","deleteIn","combineReducers","todo","pender","penderReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","penderMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6PCiCzBC,oNA3BXC,MAAQ,CAAEC,SAAU,yFAEA,IAAAC,EAAAC,KAChBC,MAAM,oBACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIN,EAAKO,SAAS,CAAER,SAAUO,EAAKP,8CAG9C,IACCA,EAAaE,KAAKH,MAAlBC,SACR,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,qBAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,wBACuBH,EAAAC,EAAAC,cAAA,0BADvB,wBAGEF,EAAAC,EAAAC,cAAA,WACKX,EAAWS,EAAAC,EAAAC,cAAA,mBAAAK,OAAchB,IAAmBS,EAAAC,EAAAC,cAAA,6CAtBzCM,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8HCLFC,GALuBC,YALN,oBAKiC,SAAAC,GAAK,OAAIA,IACzCD,YALP,cAK4B,SAAAE,GAAI,OAAIA,IAC7BF,YALP,cAK4B,SAAAD,GAAE,OAAIA,IAC3BC,YALP,cAK4B,SAAAD,GAAE,OAAIA,IAExC,GAEHI,EAAeC,YAAI,CACvBC,MAAO,GACPC,MAAOC,gBAGMC,eAAaC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EAjBP,oBAmBH,SAAClC,EAAOqC,GAAR,OAAmBrC,EAAMsC,IAAI,QAASD,EAAOE,WAFnCJ,OAAAC,EAAA,EAAAD,CAAAD,EAhBb,cAmBH,SAAClC,EAADwC,GAA8B,IAAXb,EAAWa,EAApBD,QAEZE,EAAOZ,YAAI,CAAEL,GAAIA,IAAMkB,SAAS,EAAOf,SAC7C,OAAO3B,EAAM2C,OAAO,QAAS,SAAAZ,GAAK,OAAIA,EAAMa,KAAKH,OANzBN,OAAAC,EAAA,EAAAD,CAAAD,EAfb,cAuBH,SAAClC,EAAD6C,GAA4B,IAATrB,EAASqB,EAAlBN,QAEZO,EAAQ9C,EAAM+C,IAAI,SAASC,UAAU,SAAAP,GAAI,OAAIA,EAAKM,IAAI,QAAUvB,IACtE,OAAOxB,EAAMiD,SAAS,CAAC,QAASH,EAAO,WAAY,SAAAJ,GAAO,OAAKA,MAXvCP,OAAAC,EAAA,EAAAD,CAAAD,EAdb,cA2BH,SAAClC,EAADkD,GAA4B,IAAT1B,EAAS0B,EAAlBX,QAEZO,EAAQ9C,EAAM+C,IAAI,SAASC,UAAU,SAAAP,GAAI,OAAIA,EAAKM,IAAI,QAAUvB,IACtE,OAAOxB,EAAMmD,SAAS,CAAC,QAASL,MAhBRZ,GAkBzBN,GClCYwB,cAAgB,CAC3BC,OACAC,OAASC,kBCDPC,EAAmBpC,OAAOqC,sCAAwCC,IAMzDC,EAJDC,YAAYC,EAAUL,EAChCM,YAAgBC,SCCpBC,IAASC,OACLvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAUP,MAASA,GACfjD,EAAAC,EAAAC,cAACuD,EAAD,OAGHC,SAASC,eAAe,SJmHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,KAAK,SAAAoE,GACjCA,EAAaC","file":"static/js/main.bfc87e98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n    state = { username: null };\n\n    componentDidMount() {\n        fetch('/api/getUsername')\n            .then(res => res.json())\n            .then(user => this.setState({ username: user.username }));\n    }\n\n  render() {\n    const { username } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n          <div>\n              {username ? <h1>{`Hello ${username}`}</h1> : <h1>Loading.. please wait!</h1>}\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createAction, handleActions } from 'redux-actions';\nimport { Map, List } from 'immutable';\n\nconst CHANGE_INPUT = 'todo/CHANGE_INPUT';\nconst INSERT = 'todo/INSERT';\nconst TOGGLE = 'todo/TOGGLE';\nconst REMOVE = 'todo/REMOVE';\n\nexport const changeInput = createAction(CHANGE_INPUT, value => value);\nexport const insert = createAction(INSERT, text => text);\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\n\nlet id = 0;\n\nconst initialState = Map({\n  input: '',\n  todos: List()\n});\n\nexport default handleActions({\n  \n  [CHANGE_INPUT]: (state, action) => state.set('input', action.payload),\n  [INSERT]: (state, { payload: text }) => {\n    \n    const item = Map({ id: id++, checked: false, text }); \n    return state.update('todos', todos => todos.push(item));\n  },\n  [TOGGLE]: (state, { payload: id }) => {\n    \n    const index = state.get('todos').findIndex(item => item.get('id') === id);\n    return state.updateIn(['todos', index, 'checked'], checked => !checked);\n  },\n  [REMOVE]: (state, { payload: id }) => {\n    \n    const index = state.get('todos').findIndex(item => item.get('id') === id);\n    return state.deleteIn(['todos', index]);\n  }\n}, initialState);","import {combineReducers} from 'redux';\nimport {penderReducer} from 'redux-pender';\nimport todo from './todo';\n\nexport default combineReducers({\n    todo,\n    pender : penderReducer\n});","import { createStore, applyMiddleware, compose} from 'redux';\nimport penderMiddleware from 'redux-pender';\n\nimport reducers from './modules';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(\n    applyMiddleware(penderMiddleware())\n));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store/store';\n\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>\n    ,\n     document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}